/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

export { };

declare global {
  namespace GQL {
    /*******************************
     *                             *
     *          TYPE DEFS          *
     *                             *
     *******************************/
    export interface Query {
      _empty?: string;
      loginUser: UserAuth;
      getUser: User;
      getUsersByRole: UserList;
      getMachine: Machine;
      getMachines: MachineList;
      getMachinesByUser: MachineList;
      getDashboardOverview: Dashboard;
      getPendingList: PendingList;
      getHistoryCount: number;
    }
    
    export interface LoginInput {
      email: string;
      password: string;
    }
    
    export interface UserAuth {
      token: string;
      name: string;
      type: string;
    }
    
    export interface User {
      _id: string;
      name: string;
      password: string;
      type: UserType;
      phone: string;
      email: string;
      address?: string;
      createdAt: string;
      updatedAt: string;
    }
    
    export const enum UserType {
      ADMIN = 'ADMIN',
      DEALER = 'DEALER',
      USER = 'USER'
    }
    
    export interface UserList {
      users: Array<User>;
      totalCount: number;
    }
    
    export interface Machine {
      _id: string;
      name: string;
      description: string;
      machineType: MachineType;
      loadCapacity: string;
      creator: User;
      createdAt: string;
      updatedAt: string;
    }
    
    export const enum MachineType {
      SINGLE_PHASE = 'SINGLE_PHASE',
      THREE_PHASE = 'THREE_PHASE'
    }
    
    export interface MachineList {
      machines: Array<Machine>;
      totalCount: number;
    }
    
    export interface Dashboard {
      pendingCount: number;
      userCount: number;
      dealerCount: number;
    }
    
    export interface PendingList {
      pendingReadings: Array<PendingReadings>;
      totalCount: number;
    }
    
    export interface PendingReadings {
      _id: string;
      creator: User;
      machine: Machine;
      createdAt: string;
      updatedAt: string;
    }
    
    export interface Mutation {
      _empty?: string;
      createUser: User;
      editUser: User;
      deleteUser: Message;
      createMachineByUser: Message;
      createMachineByDealer: Message;
      editMachine: Machine;
      deleteMachine: Message;
      addLiveReadings: Message;
      updatePendingStatus: History;
    }
    
    export interface UserInput {
      name: string;
      password: string;
      type: UserType;
      phone: string;
      email: string;
      address?: string;
    }
    
    export interface Message {
      message: string;
    }
    
    export interface UserMachineInput {
      name: string;
      description: string;
      machineType: MachineType;
      loadCapacity: string;
      userInput: UserInput;
    }
    
    export interface DealerMachineInput {
      name: string;
      description: string;
      machineType: MachineType;
      loadCapacity: string;
      creator: string;
    }
    
    export interface LiveInput {
      readings: string;
      machineId: string;
    }
    
    export interface History {
      _id: string;
      machine: Machine;
      creator: User;
      createdAt: string;
      updatedAt: string;
    }
    
    export interface Subscription {
      _empty?: string;
      getLiveReadingById: LiveReadings;
    }
    
    export interface LiveReadings {
      _id: string;
      readings: string;
      machine: Machine;
      createdAt: string;
      updatedAt: string;
    }
    
    /*********************************
     *                               *
     *         TYPE RESOLVERS        *
     *                               *
     *********************************/
    /**
     * This interface define the shape of your resolver
     * Note that this type is designed to be compatible with graphql-tools resolvers
     * However, you can still use other generated interfaces to make your resolver type-safed
     */
    export interface Resolver {
      Query?: QueryTypeResolver;
      UserAuth?: UserAuthTypeResolver;
      User?: UserTypeResolver;
      UserList?: UserListTypeResolver;
      Machine?: MachineTypeResolver;
      MachineList?: MachineListTypeResolver;
      Dashboard?: DashboardTypeResolver;
      PendingList?: PendingListTypeResolver;
      PendingReadings?: PendingReadingsTypeResolver;
      Mutation?: MutationTypeResolver;
      Message?: MessageTypeResolver;
      History?: HistoryTypeResolver;
      Subscription?: SubscriptionTypeResolver;
      LiveReadings?: LiveReadingsTypeResolver;
    }
    export interface QueryTypeResolver<TParent = any> {
      _empty?: QueryTo_emptyResolver<TParent>;
      loginUser?: QueryToLoginUserResolver<TParent>;
      getUser?: QueryToGetUserResolver<TParent>;
      getUsersByRole?: QueryToGetUsersByRoleResolver<TParent>;
      getMachine?: QueryToGetMachineResolver<TParent>;
      getMachines?: QueryToGetMachinesResolver<TParent>;
      getMachinesByUser?: QueryToGetMachinesByUserResolver<TParent>;
      getDashboardOverview?: QueryToGetDashboardOverviewResolver<TParent>;
      getPendingList?: QueryToGetPendingListResolver<TParent>;
      getHistoryCount?: QueryToGetHistoryCountResolver<TParent>;
    }
    
    export interface QueryTo_emptyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToLoginUserArgs {
      loginInput?: LoginInput;
    }
    export interface QueryToLoginUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToLoginUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetUserArgs {
      id?: string;
    }
    export interface QueryToGetUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToGetUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetUsersByRoleArgs {
      role: UserType;
      page?: number;
    }
    export interface QueryToGetUsersByRoleResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToGetUsersByRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetMachineArgs {
      id: string;
    }
    export interface QueryToGetMachineResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToGetMachineArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetMachinesArgs {
      page: number;
    }
    export interface QueryToGetMachinesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToGetMachinesArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetMachinesByUserArgs {
      page: number;
      id?: string;
    }
    export interface QueryToGetMachinesByUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToGetMachinesByUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetDashboardOverviewResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetPendingListArgs {
      page: number;
    }
    export interface QueryToGetPendingListResolver<TParent = any, TResult = any> {
      (parent: TParent, args: QueryToGetPendingListArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface QueryToGetHistoryCountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserAuthTypeResolver<TParent = any> {
      token?: UserAuthToTokenResolver<TParent>;
      name?: UserAuthToNameResolver<TParent>;
      type?: UserAuthToTypeResolver<TParent>;
    }
    
    export interface UserAuthToTokenResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserAuthToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserAuthToTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserTypeResolver<TParent = any> {
      _id?: UserTo_idResolver<TParent>;
      name?: UserToNameResolver<TParent>;
      password?: UserToPasswordResolver<TParent>;
      type?: UserToTypeResolver<TParent>;
      phone?: UserToPhoneResolver<TParent>;
      email?: UserToEmailResolver<TParent>;
      address?: UserToAddressResolver<TParent>;
      createdAt?: UserToCreatedAtResolver<TParent>;
      updatedAt?: UserToUpdatedAtResolver<TParent>;
    }
    
    export interface UserTo_idResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToPasswordResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToPhoneResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToEmailResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToAddressResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToCreatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserToUpdatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserListTypeResolver<TParent = any> {
      users?: UserListToUsersResolver<TParent>;
      totalCount?: UserListToTotalCountResolver<TParent>;
    }
    
    export interface UserListToUsersResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface UserListToTotalCountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MachineTypeResolver<TParent = any> {
      _id?: MachineTo_idResolver<TParent>;
      name?: MachineToNameResolver<TParent>;
      description?: MachineToDescriptionResolver<TParent>;
      machineType?: MachineToMachineTypeResolver<TParent>;
      loadCapacity?: MachineToLoadCapacityResolver<TParent>;
      creator?: MachineToCreatorResolver<TParent>;
      createdAt?: MachineToCreatedAtResolver<TParent>;
      updatedAt?: MachineToUpdatedAtResolver<TParent>;
    }
    
    export interface MachineTo_idResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MachineToNameResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MachineToDescriptionResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MachineToMachineTypeResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MachineToLoadCapacityResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MachineToCreatorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MachineToCreatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MachineToUpdatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MachineListTypeResolver<TParent = any> {
      machines?: MachineListToMachinesResolver<TParent>;
      totalCount?: MachineListToTotalCountResolver<TParent>;
    }
    
    export interface MachineListToMachinesResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MachineListToTotalCountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DashboardTypeResolver<TParent = any> {
      pendingCount?: DashboardToPendingCountResolver<TParent>;
      userCount?: DashboardToUserCountResolver<TParent>;
      dealerCount?: DashboardToDealerCountResolver<TParent>;
    }
    
    export interface DashboardToPendingCountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DashboardToUserCountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface DashboardToDealerCountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PendingListTypeResolver<TParent = any> {
      pendingReadings?: PendingListToPendingReadingsResolver<TParent>;
      totalCount?: PendingListToTotalCountResolver<TParent>;
    }
    
    export interface PendingListToPendingReadingsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PendingListToTotalCountResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PendingReadingsTypeResolver<TParent = any> {
      _id?: PendingReadingsTo_idResolver<TParent>;
      creator?: PendingReadingsToCreatorResolver<TParent>;
      machine?: PendingReadingsToMachineResolver<TParent>;
      createdAt?: PendingReadingsToCreatedAtResolver<TParent>;
      updatedAt?: PendingReadingsToUpdatedAtResolver<TParent>;
    }
    
    export interface PendingReadingsTo_idResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PendingReadingsToCreatorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PendingReadingsToMachineResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PendingReadingsToCreatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface PendingReadingsToUpdatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationTypeResolver<TParent = any> {
      _empty?: MutationTo_emptyResolver<TParent>;
      createUser?: MutationToCreateUserResolver<TParent>;
      editUser?: MutationToEditUserResolver<TParent>;
      deleteUser?: MutationToDeleteUserResolver<TParent>;
      createMachineByUser?: MutationToCreateMachineByUserResolver<TParent>;
      createMachineByDealer?: MutationToCreateMachineByDealerResolver<TParent>;
      editMachine?: MutationToEditMachineResolver<TParent>;
      deleteMachine?: MutationToDeleteMachineResolver<TParent>;
      addLiveReadings?: MutationToAddLiveReadingsResolver<TParent>;
      updatePendingStatus?: MutationToUpdatePendingStatusResolver<TParent>;
    }
    
    export interface MutationTo_emptyResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCreateUserArgs {
      userInput?: UserInput;
    }
    export interface MutationToCreateUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCreateUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToEditUserArgs {
      id: string;
      userInput?: UserInput;
    }
    export interface MutationToEditUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToEditUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToDeleteUserArgs {
      id: string;
    }
    export interface MutationToDeleteUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToDeleteUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCreateMachineByUserArgs {
      machineInput?: UserMachineInput;
    }
    export interface MutationToCreateMachineByUserResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCreateMachineByUserArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToCreateMachineByDealerArgs {
      machineInput?: DealerMachineInput;
    }
    export interface MutationToCreateMachineByDealerResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToCreateMachineByDealerArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToEditMachineArgs {
      id: string;
      machineInput?: DealerMachineInput;
    }
    export interface MutationToEditMachineResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToEditMachineArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToDeleteMachineArgs {
      id: string;
    }
    export interface MutationToDeleteMachineResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToDeleteMachineArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToAddLiveReadingsArgs {
      liveInput?: LiveInput;
    }
    export interface MutationToAddLiveReadingsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToAddLiveReadingsArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MutationToUpdatePendingStatusArgs {
      id: string;
    }
    export interface MutationToUpdatePendingStatusResolver<TParent = any, TResult = any> {
      (parent: TParent, args: MutationToUpdatePendingStatusArgs, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface MessageTypeResolver<TParent = any> {
      message?: MessageToMessageResolver<TParent>;
    }
    
    export interface MessageToMessageResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface HistoryTypeResolver<TParent = any> {
      _id?: HistoryTo_idResolver<TParent>;
      machine?: HistoryToMachineResolver<TParent>;
      creator?: HistoryToCreatorResolver<TParent>;
      createdAt?: HistoryToCreatedAtResolver<TParent>;
      updatedAt?: HistoryToUpdatedAtResolver<TParent>;
    }
    
    export interface HistoryTo_idResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface HistoryToMachineResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface HistoryToCreatorResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface HistoryToCreatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface HistoryToUpdatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface SubscriptionTypeResolver<TParent = any> {
      _empty?: SubscriptionTo_emptyResolver<TParent>;
      getLiveReadingById?: SubscriptionToGetLiveReadingByIdResolver<TParent>;
    }
    
    export interface SubscriptionTo_emptyResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
    }
    
    export interface SubscriptionToGetLiveReadingByIdResolver<TParent = any, TResult = any> {
      resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult;
      subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
    }
    
    export interface LiveReadingsTypeResolver<TParent = any> {
      _id?: LiveReadingsTo_idResolver<TParent>;
      readings?: LiveReadingsToReadingsResolver<TParent>;
      machine?: LiveReadingsToMachineResolver<TParent>;
      createdAt?: LiveReadingsToCreatedAtResolver<TParent>;
      updatedAt?: LiveReadingsToUpdatedAtResolver<TParent>;
    }
    
    export interface LiveReadingsTo_idResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LiveReadingsToReadingsResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LiveReadingsToMachineResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LiveReadingsToCreatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
    export interface LiveReadingsToUpdatedAtResolver<TParent = any, TResult = any> {
      (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
    }
    
  }
}